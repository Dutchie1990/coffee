// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	services "coffee/coffee-server/services"

	mock "github.com/stretchr/testify/mock"
)

// CoffeeService is an autogenerated mock type for the CoffeeService type
type CoffeeService struct {
	mock.Mock
}

// CreateCoffee provides a mock function with given fields: coffee
func (_m *CoffeeService) CreateCoffee(coffee services.Coffee) (*services.Coffee, error) {
	ret := _m.Called(coffee)

	if len(ret) == 0 {
		panic("no return value specified for CreateCoffee")
	}

	var r0 *services.Coffee
	var r1 error
	if rf, ok := ret.Get(0).(func(services.Coffee) (*services.Coffee, error)); ok {
		return rf(coffee)
	}
	if rf, ok := ret.Get(0).(func(services.Coffee) *services.Coffee); ok {
		r0 = rf(coffee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.Coffee)
		}
	}

	if rf, ok := ret.Get(1).(func(services.Coffee) error); ok {
		r1 = rf(coffee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCoffee provides a mock function with given fields: id
func (_m *CoffeeService) DeleteCoffee(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCoffee")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCoffees provides a mock function with given fields:
func (_m *CoffeeService) GetAllCoffees() ([]*services.Coffee, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCoffees")
	}

	var r0 []*services.Coffee
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*services.Coffee, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*services.Coffee); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*services.Coffee)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoffeesById provides a mock function with given fields: id
func (_m *CoffeeService) GetCoffeesById(id string) (*services.Coffee, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCoffeesById")
	}

	var r0 *services.Coffee
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*services.Coffee, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *services.Coffee); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.Coffee)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCoffee provides a mock function with given fields: id, coffee
func (_m *CoffeeService) UpdateCoffee(id string, coffee services.Coffee) (*services.Coffee, error) {
	ret := _m.Called(id, coffee)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCoffee")
	}

	var r0 *services.Coffee
	var r1 error
	if rf, ok := ret.Get(0).(func(string, services.Coffee) (*services.Coffee, error)); ok {
		return rf(id, coffee)
	}
	if rf, ok := ret.Get(0).(func(string, services.Coffee) *services.Coffee); ok {
		r0 = rf(id, coffee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.Coffee)
		}
	}

	if rf, ok := ret.Get(1).(func(string, services.Coffee) error); ok {
		r1 = rf(id, coffee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCoffeeService creates a new instance of CoffeeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoffeeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoffeeService {
	mock := &CoffeeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
